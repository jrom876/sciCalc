// inrushItest.check
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <check.h>
#include "inrushICalc.c"
#define PI            3.14159265358979323846 // ad infinitum
#define LIGHT_SPEED   299792458 // meters per second
#define KILO 1000
#define MEGA 1000000
#define GIGA 1000000000
#define TERA 1000000000000 

//// IMPORTANT: Be sure to include the .c file, not the .h file.
//// This gives us access to all static members of the .c file.

//// To generate and run test code automatically,
//// run the following commands on the linux command line.
//// checkmk inrushItest.check >inrushItest.c
//// make -f make-test.mk inrushItest

struct ic_test {  	
	float tvac;
  	float tfreqHz;
  	float tiout;
  	float tvout;
  	float tnetCap;
  	float tzSystem;
  	float tresr;
};

#test inrushItest
void runThis(void){
	int c,d,e;
	int numTests = 1;
	struct ic_test f1; 	
	f1.tvac = 480;
  	f1.tfreqHz = 60;
  	f1.tiout = 100;
  	f1.tvout = 120;
  	f1.tnetCap = 0.47;
  	f1.tzSystem = 1000;
  	f1.tresr = 2.5;

	for (c = 0; c < 1; c++) {
	// This is the initialization loop because it only has 1 iteration.
	// Initialize all variables here.
		printf("\nSanity Check \tStart ictest");
	
		//f1.tvac = 120;
		//f1.tfreqHz = 60;
		//f1.tiout = 20;
		//f1.tvout = 12;
		//f1.tnetCap = 0.47;
		//f1.tzSystem = 50;
		//f1.tresr = 0.001;	
		
	// This is the first test loop, for broader incremental iteration, 
	// variable set-reset, or for simple loop multiplication.	
		for (d = 0; d < 1; d++) {
			//f1.tvac += 10;
				//f1.tfreqHz += 1;
				//f1.tiout += 1;
				//f1.tvout += 1;
				//f1.tnetCap += 0.001;
				//f1.tzSystem += 1;
				//f1.tresr += 0.001;	
			
	// This is the main (inner) loop, for finest incremental iteration
			for (e = 1; e <= 3; e++) {	
			
			// Pre-test incrementation (better think twice)
				//f1.tvac += 10;
				//f1.tfreqHz += 1;
				//f1.tiout += 1;
				//f1.tvout += 1;
				//f1.tnetCap += 0.001;
				//f1.tzSystem += 1;
				//f1.tresr += 0.001;
				
				//printBPF2Test(f1);
				printf("\nInitial test2 settings:\nmain loop number\t%d\n",e);
				printf("VAC input\t\t%.4f vac\nfreq\t\t\t%.4f Hz\niout\t\t\t%.4f amps\nvout\t\t\t%.4f\n",f1.tvac,f1.tfreqHz,f1.tiout,f1.tvout);
				printf("Net Capacitance\t\t%.4f uF\nSystem Z\t\t%.4f ohms\nESR of NTC and Caps\t%.4f ohms\n",f1.tnetCap,f1.tzSystem,f1.tresr);
				
				struct ICL holder = setValuesIC(f1.tvac,f1.tfreqHz,f1.tiout,f1.tvout,f1.tnetCap,f1.tzSystem,f1.tresr);
							
			// Post-test incrementation	(preferred)
				//f1.tvac += 10;
				//f1.tfreqHz += 1;
				f1.tiout += 1;
				//f1.tvout += 1;
				//f1.tnetCap += 0.001;
				//f1.tzSystem += 1;
				//f1.tresr += 0.001;
				
				//fail_if((f1.cf<= 0 || f1.bw<= 0 || f1.ind<= 0), "Whoah, those values dont make sense!!");
				//fail_if((((f1.cf*MEGA)/(f1.bw*KILO)) < 10.1) , "That Q is %.3f which is too small, because BW is too wide",	(f1.cf*MEGA)/(f1.bw*KILO));
				//fail_unless((rxPwrDBM(t1.PtdBm,t1.GtdB,t1.GrdB,t1.R,t1.freq))*TERA < 3690, "WTF?");				
			}	
		}
	}
}
runThis();
