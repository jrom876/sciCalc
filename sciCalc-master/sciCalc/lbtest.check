// lbtest.check
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <check.h>
#include "fresnelCalc.c"
#include "linkBudgetCalc.c"
#define PI            3.14159265358979323846 // ad infinitum
#define LIGHT_SPEED   299792458 // meters per second
#define KILO 1000
#define MEGA 1000000
#define GIGA 1000000000
#define TERA 1000000000000 

//// To generate and run test code automatically,
//// run the following commands on the linux command line:
//// checkmk lbtest.check >lbtest.c -lcheck -lm -lpthread -lrt -lsubunit -lcheck_pic
//// make -f make-test.mk lbtest
//

struct rxdbm_test {
    float 	PtdBm;
    float 	GtdB;
    float 	GrdB;
    float 	R;
    float 	freq;
};

#test rxdbm
int runThis(void){
	int a,b,c,d,e;
	int numTests = 5;
	struct rxdbm_test t1;	
	t1.PtdBm = 40;
	t1.GtdB = 40;
	t1.GrdB = 20;
	t1.R = 2;
	t1.freq = 41;

	void printRxDBMTest(struct rxdbm_test t1) {
		printf("\n%.4f\tPtdBm\n",t1.PtdBm);
		printf("%.4f\tGtdb\n",t1.GtdB);
		printf("%.4f\tGrdb\n",t1.GrdB);
		printf("%.4f\tDistance km\n",t1.R);
		printf("%.4f\tfreq GHz\n",t1.freq);
	}	
	
	for (a = 0; a < 1; a++) {
		//t1.freq += 5;
		
		for (b = 0; b < 1; b++) {				
			//t1.R += 5;	
			
			for (c = 0; c < 1; c++) {
				//t1.PtdBm = 30;
				//t1.GtdB = 40;					
				//t1.GrdB += 0.1;
				
				for (d = 0; d < 1; d++) {
					//t1.PtdBm = 47;						
					//t1.freq -= 1;	
					
					for (e = 0; e < 1; e++) {
						//t1.PtdBm -= 1;
						//printRxDBMTest(t1);
						//rxPwrDBM(t1.PtdBm,t1.GtdB,t1.GrdB,t1.R,t1.freq);
						printRxDBM(t1.PtdBm,t1.GtdB,t1.GrdB,t1.R,t1.freq);
						fail_if((rxPwrDBM(t1.PtdBm,t1.GtdB,t1.GrdB,t1.R,t1.freq))*TERA > 3700, "Whoah, that is a strong signal!!");
						//fail_unless((rxPwrDBM(t1.PtdBm,t1.GtdB,t1.GrdB,t1.R,t1.freq))*TERA < 3690, "WTF?");
					}	
				}
			}
		}
	}
}
runThis();

// START_TEST(test_alpha)
//		printf"\nTEST\n");
//    uint8_t bytes[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 170};
//    bitreader_t* b = bitreader_new(bytes, sizeof(bytes));
//
//    ck_assert_int_eq(bitreader_read_uint8(b), 1);
//    ck_assert_int_eq(bitreader_read_uint16(b), 515);
//    ck_assert_int_eq(bitreader_read_uint24(b), 263430);
//    ck_assert_int_eq(bitreader_read_uint32(b), 117967114);
//    ck_assert_int_eq(bitreader_read_uint64(b), 72623859790382856);
//    ck_assert(!bitreader_eof(b));
//    ck_assert(bitreader_read_bit(b));
//    ck_assert(!bitreader_eof(b));
//    ck_assert(!bitreader_read_bit(b));
//    ck_assert_int_eq(bitreader_read_bits(b, 2), 2);
//    ck_assert_int_eq(bitreader_read_bits(b, 4), 10);
//    ck_assert(bitreader_eof(b));
//    ck_assert(!b->error);
//    bitreader_skip_bits(b, 1);
//    ck_assert(b->error);

//    bitreader_free(b);
//END_TEST //
//test_alpha();
